// DO NOT edit this file
const rewire = require('rewire');

describe('nameOfCity', () => {
  test.each`
    input            | expected
    ${'Los Angeles'} | ${'Los Angeles'}
    ${'New York'}    | ${'New York'}
    ${'newcastle'}   | ${'newcastle'}
    ${'Valletta'}    | ${'The city name does not begin with Los or New'}
    ${'los almost'}  | ${'los almost'}
  `(
    'check if $input contains `los` or `new`: $expected',
    ({ input, expected }) => {
      const solution = rewire('../solution');
      const nameOfCity = solution.__get__('nameOfCity');
      expect(nameOfCity(input)).toBe(expected);
    }
  );
});

describe('isDivisible', () => {
  test.each`
    input    | expected
    ${100}   | ${true}
    ${1000}  | ${true}
    ${1}     | ${false}
    ${48}    | ${false}
    ${10000} | ${true}
  `('check if $input is divisible by 100: $expected', ({ input, expected }) => {
    const solution = rewire('../solution');
    const isDivisible = solution.__get__('isDivisible');
    expect(isDivisible(input)).toBe(expected);
  });
});

describe('isRaining', () => {
  test.each`
    input    | expected
    ${true}  | ${'wet day - you need an umbrella'}
    ${false} | ${'dry day - leave your umbrella at home'}
  `('Is it raining today?: if $input then $expected', ({ input, expected }) => {
    const solution = rewire('../solution');
    const isRaining = solution.__get__('isRaining');
    expect(isRaining(input)).toBe(expected);
  });
});

//loops

describe('geometricalSequence', () => {
  it('should return a geometrical sequence', () => {
    const solution = rewire('../solution');
    const geometricalSequence = solution.__get__('geometricalSequence');
    expect(geometricalSequence(5)).toBe('1 2 4 8 16');
    expect(geometricalSequence(10)).toBe('1 2 4 8 16 32 64 128 256 512');
  });
});

describe('multiplesOfThree', () => {
  it('should returns first five multiples of three', () => {
    const solution = rewire('../solution');
    const multiplesOfThree = solution.__get__('multiplesOfThree');
    expect(multiplesOfThree(5)).toBe('3 6 9 12 15');
    expect(multiplesOfThree(10)).toBe('3 6 9 12 15 18 21 24 27 30');
  });
});

describe('powerOf', () => {
  test.each`
    input | expected
    ${3}  | ${27}
    ${2}  | ${4}
    ${4}  | ${256}
    ${9}  | ${387420489}
  `(
    '$input to the power of $input should be $expected',
    ({ input, expected }) => {
      const solution = rewire('../solution');
      const powerOf = solution.__get__('powerOf');
      expect(powerOf(input)).toBe(expected);
    }
  );
});

describe('vowelCount', () => {
  test.each`
    input               | expected
    ${'aeiou'}          | ${5}
    ${'AEIOU'}          | ${5}
    ${'bhjpg'}          | ${0}
    ${'hello'}          | ${2}
    ${'initialization'} | ${8}
  `('$input has $expected vowels', ({ input, expected }) => {
    const solution = rewire('../solution');
    const vowelCount = solution.__get__('vowelCount');
    expect(vowelCount(input)).toBe(expected);
  });
});
